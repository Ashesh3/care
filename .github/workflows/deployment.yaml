name: Deploy Care
on:
  push:
    branches:
      - "*"
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:
env:
  IMAGE_NAME: care
  AWS_DEFAULT_REGION: ap-south-1
  AWS_DEFAULT_OUTPUT: json
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  test:
    runs-on: ubuntu-latest
    name: Test
    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  build-dockerhub-staging:
    environment: Staging
    name: Build & Push to Dockerhub
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set current date as ENV variable
        run: echo "NOW=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Github Short SHA
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Push image
        run: |
          IMAGE_ID=${{ secrets.DOCKER_HUB_USERNAME }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION-$GITHUB_RUN_NUMBER-$NOW-$SHORT_SHA
          docker tag $IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID --all-tags

  build-github-staging:
    environment: Staging
    if: github.ref == 'refs/heads/master'
    name: Build and push to GitHub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set current date as ENV variable
        run: echo "NOW=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Github Short SHA
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION-$GITHUB_RUN_NUMBER-$NOW-$SHORT_SHA
          docker tag $IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID --all-tags

  deploy-staging:
    needs: build-dockerhub-staging
    name: Deploy to EKS
    runs-on: ubuntu-latest
    environment:
      name: Staging
      url: https://careapi.coronasafe.in
    steps:
      - name: Checkout Kube Config
        uses: actions/checkout@v2
        with:
          repository: coronasafe/care_infra
          token: ${{ secrets.CORONASAFE_GITHUB_PAT }}
          path: kube
          ref: main
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      - name: Deploy Care Staging
        run: |
          mkdir -p $HOME/.kube/
          echo "${{ secrets.CARE_STAGING_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          cd kube/staging/care
          sed -i -e "s/_BUILD_NUMBER_/${GITHUB_RUN_NUMBER}/g" deployment.yml
          sed -i -e "s/_BUILD_NUMBER_/${GITHUB_RUN_NUMBER}/g" celery-beat.yml
          sed -i -e "s/_BUILD_NUMBER_/${GITHUB_RUN_NUMBER}/g" celery-worker.yml
          kubectl apply -f deployment.yml
          kubectl apply -f celery-beat.yml
          kubectl apply -f celery-worker.yml

  build-dockerhub-production:
    needs: test
    environment: Production
    name: Build & Push to Dockerhub
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set current date as ENV variable
        run: echo "NOW=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Github Short SHA
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Push image
        run: |
          IMAGE_ID=${{ secrets.DOCKER_HUB_USERNAME }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "production" ] && VERSION=production-latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION-$GITHUB_RUN_NUMBER-$NOW-$SHORT_SHA
          docker tag $IMAGE_NAME $IMAGE_ID:production-latest
          docker push $IMAGE_ID --all-tags

  build-github-production:
    needs: test
    if: github.ref == 'refs/heads/production'
    environment: Production
    name: Build and push to GitHub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set current date as ENV variable
        run: echo "NOW=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Github Short SHA
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "production" ] && VERSION=production-latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION-$GITHUB_RUN_NUMBER-$NOW-$SHORT_SHA
          docker tag $IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID --all-tags

  deploy-production:
    needs: build-dockerhub-production
    name: Deploy to EKS
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: https://careapi.coronasafe.network
    steps:
      - name: Checkout Kube Config
        uses: actions/checkout@v2
        with:
          repository: coronasafe/care_infra
          token: ${{ secrets.CORONASAFE_GITHUB_PAT }}
          path: kube
          ref: main
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      - name: Deploy Care Production
        run: |
          mkdir -p $HOME/.kube/
          echo "${{ secrets.CARE_PRODUCTION_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          cd kube/production/care
          aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
          aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
          aws configure set region ${AWS_DEFAULT_REGION}
          aws configure set output json
          sed -i -e "s/_BUILD_NUMBER_/${GITHUB_RUN_NUMBER}/g" deployment.yml
          sed -i -e "s/_BUILD_NUMBER_/${GITHUB_RUN_NUMBER}/g" celery-beat.yml
          sed -i -e "s/_BUILD_NUMBER_/${GITHUB_RUN_NUMBER}/g" celery-worker.yml
          kubectl apply -f deployment.yml
          kubectl apply -f celery-beat.yml
          kubectl apply -f celery-worker.yml
